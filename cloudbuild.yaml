# cloudbuild.yaml
# This Cloud Build configuration is designed to:
# 1. Fetch a secret (OPENAI_API_KEY) from Google Secret Manager.
# 2. Build only the 'frontend' Docker image, located in the 'frontend/' directory.
# 3. Pass the fetched secret as a build argument and environment variable to the frontend build.
# 4. Push the resulting frontend Docker image to Google Container Registry.

steps:
  # Step 1: Build the frontend Docker image
  # The 'name' specifies the Cloud Builder image to use (in this case, the Docker builder).
  - name: 'gcr.io/cloud-builders/docker'
    # 'dir' specifies the subdirectory where the Dockerfile and build context are located.
    # Ensure your frontend's Dockerfile is directly inside the 'frontend' folder relative to the repo root.
    dir: 'frontend' 
    args:
      # 'build' command for Docker.
      - 'build'
      # '--build-arg' is used to pass environment variables to the Dockerfile at build time.
      # This is crucial for your Next.js 'npm run build' that checks for OPENAI_API_KEY.
      # '_OPENAI_API_KEY' is an internal Cloud Build variable that gets its value from Secret Manager.
      - '--build-arg'
      - 'OPENAI_API_KEY=${_OPENAI_API_KEY}'
      # '-t' tags the Docker image with a name.
      # '$PROJECT_ID' is a built-in Cloud Build variable for your GCP project ID.
      # Replace 'your-frontend-service-name' with the desired name for your Cloud Run service's image.
      - '-t'
      - 'gcr.io/databricks-alj/alj-agentic-databricks-frontend'
      # '.' indicates that the build context is the current directory (i.e., 'frontend/' in this step).
      - '.'
    
    # 'env' explicitly sets environment variables for this specific build step.
    # While '--build-arg' passes to the Docker build, 'env' ensures it's directly in the shell
    # where the 'docker build' command itself runs, and also often makes it available within
    # the Dockerfile's RUN commands more reliably for npm/yarn scripts.
    env:
      - 'OPENAI_API_KEY=${_OPENAI_API_KEY}'
    
    # 'secretEnv' tells Cloud Build to redact the values of these variables from the build logs,
    # ensuring your secret is not exposed in plain text in logs.
    secretEnv: ['_OPENAI_API_KEY']

# 'availableSecrets' defines which secrets Cloud Build should fetch from Secret Manager.
availableSecrets:
  secretManager:
    # This array defines one or more secrets to fetch.
    - versionName: projects/databricks-alj/secrets/openai-api-key/versions/latest
      # 'versionName' specifies the full resource path to your secret in Secret Manager.
      # Replace 'openai-api-key' with the exact name you gave your secret.
      # 'versions/latest' means it will always fetch the most recent version of the secret.
      # 'env' maps the fetched secret's value to an internal Cloud Build environment variable.
      # This variable ('_OPENAI_API_KEY') is then used in the 'steps' section.
      env: '_OPENAI_API_KEY'

# 'images' specifies which Docker images generated by the build steps should be pushed
# to Google Container Registry upon successful completion of the build.
images:
  - 'gcr.io/databricks-alj/alj-agentic-databricks-frontend' # Match the tag used in the build step above.